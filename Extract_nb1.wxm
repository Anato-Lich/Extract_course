/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
matsize(A) := [length(A), length(transpose(A))] $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Ввод имеет вид: A_1 * y' + A_0 * y = 0
A1 - приведенная по строкам матрица, вырожденная
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
A1: matrix(
 [-1,0,x,-x,0,0], 
 [0,0,0,(x+1)*x,0,x], 
 [0,0,0,x,1,1], 
 [0,0,0,1,0,0], 
 [0,0,0,0,0,0], 
 [0,0,0,0,0,0]
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A0: matrix(
 [0,0,1,0,1,1], 
 [0,0,0,0,-1,-x-1], 
 [0,0,0,0,-1,-1], 
 [0,0,-1,0,0,0], 
 [-1,0,0,0,1,1],
    [1,x,0,0,0,0]
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
В список y вводим неизвестные Y
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
y : [y1, y2, y3, y4, y5, y6];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
В список y_s указываются индексы выделенных неизвестных
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
y_s : [1, 3]; 
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Cоздание y_r - списка невыделенных переменных.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
y_r : makelist(i, i, 1, length(A1))$
for i:1 while i <= length(y_s) do y_r : delete(y_s[i], y_r)$
y_r;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Проверка ряда матрицы, полностью ли нулевой. Ряд перед подачей необходимо транспонировать
Столбец подавать столбцом
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
check_row(r) := block( [tmp], tmp : true, for i : 1 while i <= length(r) do tmp : tmp and is (r[i] = [0]), return(tmp))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Первый этап, если среди алгебраических уравнений 
есть такое, в которое входит невыделенная неизвестная с ненулевым кф.
1.1. Выбрать такое уравнение
1.2. Используя это уравнение исключить эту неизвестную из всех 
остальных уравнений
1.3. Удалить из системы уравнение
1.4. Если есть еще такие уравнение, вернуться на 1.1.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
alg_list - список индексов строк - алгебраических уравнений
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
alg_list : []$
for i :1 while i <= length(A1) do block( if check_row(transpose(A1[i])) then alg_list : append(alg_list, [i]) )$
alg_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Фунция для исключения переменных
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
del_eq(A, B, r, c) := block([U, A1, A0, m], U : ident(length(A)), 
    A1 : A,
    A0 : B,
    m : length(A),
    
    A1 : columnswap(A1, c, length(A1)),
    A1 : rowswap(A1, r, length(A1)),
    
    A0 : columnswap(A0, c, length(A0)),
    A0 : rowswap(A0, r, length(A0)),
    
    for i : 1 while i < length(U) do
        for j : 1 while j <= length(U) do block[
            A1[i, j] : A1[i, j] - A1[i, m]*A0[m, j]*(A0[m, m]^(-1)),
        
            A0[i, j] : A0[i, j] - A1[i, m]*diff(A0[m, j]*(A0[m, m]^(-1)), x)
                        -A0[i, m]*A0[m, j]*(A0[m, m]^(-1))
    ],
    A1 : columnswap(A1, c, length(A1)),
    A1 : rowswap(A1, r, length(A1)),
    
    A0 : columnswap(A0, c, length(A0)),
    A0 : rowswap(A0, r, length(A0)),
    print(A1, A0),
    return([A1, A0])
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
clean_mat(M_inp, list_r, list_c) := block( [A_tmp, A],
    A_tmp : matrix(),
    A : M_inp,
    
   for i : 1 while i <= length(transpose(A)) do block(
        [tmp],
        tmp : col(A, i),
        if is (member(i, list_c)) then A_tmp : A_tmp else A_tmp : addcol(A_tmp, tmp)
    ),
    A : A_tmp,
    
    A_tmp : matrix(),
    for i : 1 while i <= length(A) do block(
            [tmp],
            tmp : row(A, i),
            if is (member(i, list_r)) then A_tmp : A_tmp else A_tmp : addrow(A_tmp, tmp)
        ),
    A : A_tmp,
    return(A)
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Исключение невыделенных неизвестных из всех уравнений:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
alg_list_tmp : alg_list$
used_eq_list : []$
used_var : []$
filler : makelist(0, i, length(transpose(A0)))$
for i : 1 while i <= length(alg_list) do block (
    for j : 1 while j <= length(y_r) do block(
        [tmp],
        tmp : A0[alg_list[i], y_r[j]],
        if tmp # 0
        then block(
            used_eq_list : append(used_eq_list, [ alg_list[i] ]),
            used_var : append(used_var, [ y_r[j] ]),
            
            [A1, A0] : del_eq(A1, A0, alg_list[i], y_r[j]), 
            
            A1[alg_list[i]] : filler,  
            A0[alg_list[i]] : filler,
            print("--------------------------"),
            print(A1, A0),
            alg_list_tmp : delete(alg_list[i], alg_list_tmp),
            y : delete( part(y, y_r[j]), y)
        )
    )
)$
alg_list : alg_list_tmp$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_var;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
y;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
alg_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Второй этап
2.1. Из алгебраических уравнений выбрать произвольное
2.2. Исключить выделенную неизвестную с ненулевым кф
2.3. Удалить из системы, но запомнить
2.4. Если остались еще уравнения, вернуться на 2.1.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
y_s;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
alg_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
alg_list_tmp : alg_list$
used_eq : matrix()$
order_var : []$
y_tmp : y$
filler : makelist(0, i, length(transpose(A0)))$

for i : 1 while i <= length(alg_list) do block (
    for j : 1 while j <= length(y_s) do block(
        [tmp],
        tmp : A0[alg_list[i], y_s[j]],
        if tmp # 0
        then block( 
            used_eq : addrow(used_eq, A0[ alg_list[i] ]),
            used_var : append(used_var, [ y_s[j] ]),
            used_eq_list : append(used_eq_list, [ alg_list[i] ]),
            
            [A1, A0] : del_eq(A1, A0, alg_list[i], y_s[j]), 
            
            A1[alg_list[i]] : filler,  
            A0[alg_list[i]] : filler,
            alg_list_tmp : delete(alg_list[i], alg_list_tmp),
            order_var : append(order_var, [ y_s[j] ]),
            y_tmp : delete( part(y, y_s[j]) , y_tmp)
        )
    )
)$
alg_list : alg_list_tmp$
y : y_tmp$
A1 : clean_mat(A1, used_eq_list, used_var);
A0 : clean_mat(A0, used_eq_list, used_var);
    
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq_list;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_var;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
y;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Третий этап
3.1. Построить матрицу T с количеством строк - равным кол-ву строк в use_eq
а количество столбцов - кол-во выделенных в конечной системе
Если удалены все выделенные, то T = [0..0] transpose
3.2. Иначе по used_eq строится D коэффициентов при неизвестных
Строки упорядочить по порядку использования алгебр. уравнений в п.2.
3.3. Нулевые столбцы удаляются, так происходит переход к D~ размера l x k, где k - кол-во выделенных в искодной системе
3.4. Оставшиеся столбцы упорядочиваются так, чтобы они соответсвовали порядку исключения выделенных в п.2.
Тогда D~ примет вид [D1 | D2], где D1 - верхнетреугольная без нулей, квадратная
D2 - оставшаяся часть
T = -D1^(-1) * D2
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
length(used_eq);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
order_var;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
T : matrix()$
D1 : matrix()$
D2 : matrix()$
filler : makelist(0, i, length(y_s))$

if is (length(used_eq) = length(y_s)) then T : addcol(T, filler)
else block([T_tmp],
    T : used_eq,
    T_tmp : matrix(),
    for i :1 while i <= length(transpose(T)) do block(
        [tmp],
        print("1"),
        tmp : col(T, i),
        if is (member(i, y_s)) then T_tmp : addcol(T_tmp, tmp) else T_tmp : T_tmp
    ),
    T : T_tmp,
    for i : 1 while i <= length(order_var) do block(
        T : columnswap(T, i, order_var[i]),
        print("2")
    ),
    for i : 1 while i <= length(T) do block(
        [tmp],
        print("3"),
        tmp : col(T, i),
        D1 : addcol(D1, tmp)
    ),
    for i : length(T) + 1 while i <= length(transpose(T)) do block(
        [tmp],
        print("4"),
        tmp : col(T, i),
        D2 : addcol(D2, tmp)
    ),
    print("here", length(D1), length(D2)),
    if is (matsize(T) = [0, 0]) then T : 0
    else
        if is (matsize(D2) = [0, 0]) then T : -invert(D1) 
            else if matsize(D1) = [1, 1] and matsize(D2) = [1, 1] then T : -matrix([matrix([invert(D1)]).D2])
                else T : -invert(D1).D2
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
T;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
y;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
T;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
used_eq;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
test : -invert(A1).A0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
eq_syst : ratsimp(test);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
y;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
desolve(eq_syst, y);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Используя формулу на с. 31
   [wxMaxima: comment end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
